<?php
/**
 * @file
 * relay_services_and_mail.rules_defaults.inc
 */

/**
 * Implements hook_default_rules_configuration().
 */
function relay_services_and_mail_default_rules_configuration() {
  $items = array();
  $items['rules_all_users_with_editor_role_are_made_members_of_all_groups_'] = entity_import('rules_config', '{ "rules_all_users_with_editor_role_are_made_members_of_all_groups_" : {
      "LABEL" : "All users with editor role are made members of all groups ",
      "PLUGIN" : "reaction rule",
      "ACTIVE" : false,
      "REQUIRES" : [ "rules" ],
      "ON" : [ "user_insert" ],
      "IF" : [
        { "user_has_role" : {
            "account" : [ "account" ],
            "roles" : { "value" : { "4" : "4" } },
            "operation" : "OR"
          }
        }
      ],
      "DO" : []
    }
  }');
  $items['rules_email_import_using_feeds'] = entity_import('rules_config', '{ "rules_email_import_using_feeds" : {
      "LABEL" : "Email Import using feeds for Reporter role",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules", "php" ],
      "ON" : [ "node_insert" ],
      "IF" : [
        { "node_is_of_type" : { "node" : [ "node" ], "type" : { "value" : { "card" : "card" } } } },
        { "NOT data_is_empty" : { "data" : [ "node:field-email-subject" ] } },
        { "NOT data_is_empty" : { "data" : [ "node:field-email-body" ] } },
        { "php_eval" : { "code" : "$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\nif(!empty($result_sender_user )){\\r\\n\\t$sender=user_load($result_sender_user);\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\tif((in_array(\\u0027Reporter\\u0027,$sender-\\u003Eroles)) \\u0026\\u0026 (count(array_intersect($existing_roles , $sender-\\u003Eroles)) == 1)){\\r\\n\\t\\treturn TRUE;\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\treturn FALSE;\\r\\n\\t}\\r\\n}\\r\\nelse{\\r\\n\\treturn TRUE;\\r\\n}" } }
      ],
      "DO" : [
        { "php_eval" : { "code" : "$youtube_body=strip_tags($node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n$youtube_body_string = trim(preg_replace(\\u0027\\/\\\\s+\\/\\u0027, \\u0027 \\u0027,$youtube_body));\\r\\n$pos=strpos($youtube_body_string,\\u0027Confirmation of Mobile Video Upload\\u0027);\\r\\nif(preg_match(\\u0022\\/Editor\\/i\\u0022, $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027])){\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Editor\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($result_sender_user,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027user is there\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t    $sender=user_load($result_sender_user);\\r\\n\\t\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\nwatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027user with role is there\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\t    \\r\\n\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027producermessage\\u0027;\\r\\n\\t\\t$node-\\u003Efield_card_editors_name[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_name[\\u0027und\\u0027][0][\\u0027value\\u0027];\\t\\r\\n\\t\\r\\n\\t\\t\\/\\/$node-\\u003Efield_editor_s_subject[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t$body_text = strip_tags($node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n\\t\\tif(strlen($body_text) \\u003C= \\u00272\\u0027){\\r\\n                   $mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n                    watchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($mail_to).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n               \\r\\n\\t\\t\\r\\n\\r\\n\\t\\t    $params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t    $params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n\\t\\t     drupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t}\\r\\n\\t\\t$profile = profile2_load_by_user($result_sender_user , \\u0027public_profile\\u0027);\\r\\n\\t\\t$display_mail = $profile-\\u003Efield_public_email[\\u0027und\\u0027][\\u00270\\u0027][\\u0027email\\u0027];\\r\\n\\t\\tif(empty($display_mail)){\\r\\n\\t\\t     $node-\\u003Efield_editor_s_email_address[\\u0027und\\u0027][0][\\u0027email\\u0027]=$node-\\u003Efield_email_from[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t   $node-\\u003Efield_editor_s_email_address[\\u0027und\\u0027][0][\\u0027email\\u0027] = $display_mail;\\r\\n\\t\\t}\\r\\n\\t\\t$node-\\u003Ebody[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t$node-\\u003Ebody[\\u0027und\\u0027][0][\\u0027format\\u0027]= \\u0022full_html\\u0022;\\r\\n\\t\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t\\t$extracted_tag = $hash_tag[1];\\r\\n\\t\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\t\\tif(empty($result)){\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t\\t}\\r\\n\\t\\tglobal $language ;\\r\\n       $lang_name = $language-\\u003Elanguage ;\\r\\n        $node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\t\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t$params[\\u0027type\\u0027] = \\u0027Editor Message\\u0027;\\r\\n\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t}\\r\\n\\t\\t\\/\\/Sending of mail ends here\\r\\n\\t    }\\r\\n\\t    else{\\r\\n\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027user has no role\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\t  \\r\\n\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t    }\\r\\n\\t}\\t\\r\\n}\\r\\nelseif(preg_match(\\u0022\\/Article\\/i\\u0022, $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027])){\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t$sender=user_load($result_sender_user);\\r\\n\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Article\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027article\\u0027;\\r\\n\\t\\/\\/$node-\\u003Efield_author[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_name[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$node-\\u003Efield_editor_s_email_address[\\u0027und\\u0027][0][\\u0027email\\u0027]=$node-\\u003Efield_email_from[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$node-\\u003Efield_article_subject[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$val=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t$val=check_markup($node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027], \\u0027full_html\\u0027, \\u0027\\u0027, FALSE);\\r\\n\\t$stripped_body=strip_tags($val,\\u0027\\u003Cbr\\u003E\\u0027);\\r\\n\\t$nl_body=nl2br($stripped_body);\\r\\n\\t$expl_body = explode(\\u0022\\u003Cbr \\/\\u003E\\u0022, $nl_body);\\r\\n\\t$all_lines=array_filter($expl_body, create_function(\\u0027$a\\u0027,\\u0027return preg_match(\\u0022#\\\\S#\\u0022, $a);\\u0027));\\r\\n\\t$all_lines = array_values($all_lines);\\r\\n\\t\\/\\/watchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($all_lines,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\tforeach($all_lines as $key =\\u003E $line)\\r\\n\\t{\\r\\n\\t\\tif($key == 0){\\r\\n\\t\\t\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $line;\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif($key == 1){\\r\\n\\r\\n\\t\\t\\t$node-\\u003Efield_author[\\u0027und\\u0027][0][\\u0027value\\u0027] = $line;\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif($key == 2){\\r\\n\\t\\t\\t$node-\\u003Efield_read_more_link[\\u0027und\\u0027][0][\\u0027url\\u0027] = $line;\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t$node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027value\\u0027] = $node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027value\\u0027].\\u0022 \\u0022.$line;\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\tif($key \\u003C= 4){\\r\\n\\t\\t$mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t$params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t}\\r\\n\\t$node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027format\\u0027] = \\u0022full_html\\u0022;\\r\\n\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t$extracted_tag = $hash_tag[1];\\r\\n\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\tif(empty($result)){\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t}\\r\\n\\tglobal $language ;\\r\\n    $lang_name = $language-\\u003Elanguage ;\\r\\n     $node-\\u003Elanguage = $lang_name;\\r\\n\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t$params[\\u0027type\\u0027] = \\u0027Article\\u0027;\\r\\n\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\tforeach ($group_members AS $member){\\r\\n\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t}\\r\\n\\telse{\\r\\n\\tnode_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n}\\r\\n}\\r\\nelseif(preg_match(\\u0022\\/tweet\\/i\\u0022, $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027])){\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$sender=user_load($result_sender_user);\\r\\n\\t\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\n\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Tweet\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027ftweet\\u0027;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Efield_featured_tweet_subject[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t\\t$body_text = strip_tags($node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n\\t\\t\\tif(strlen($body_text) \\u003C= \\u00272\\u0027){\\r\\n\\t\\t\\t\\t$mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t\\t$params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$node-\\u003Efield_card_featured_tweet[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t\\t$node-\\u003Efield_card_featured_tweet[\\u0027und\\u0027][0][\\u0027format\\u0027] = \\u0022full_html\\u0022;\\r\\n\\t\\t\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t\\t\\t$extracted_tag = $hash_tag[1];\\r\\n\\t\\t\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t\\t\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\r\\n\\t\\t\\tif(empty($result)){\\r\\n\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse{\\r\\n\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$node-\\u003Estatus = \\u00270\\u0027;\\r\\n\\t\\t\\t\\/\\/node_save($node);\\r\\n\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\t\\t\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t$params[\\u0027type\\u0027] = \\u0027Featured Tweet\\u0027;\\r\\n\\t\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\nelseif($pos != false){\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Youtube\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$sender=user_load($result_sender_user);\\r\\n\\t\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\n\\t\\t\\t$video_id_text=explode(\\u0027http:\\/\\/www.youtube.com\\/watch?v=\\u0027,$node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n\\t\\t\\t$video_id=explode(\\u0027\\u0022\\u0027,$video_id_text[\\u00271\\u0027]);\\r\\n\\t\\t\\t$video_id_actual = $video_id[\\u00270\\u0027];\\r\\n\\t\\t\\t$result = db_query(\\u0022SELECT fid FROM file_managed WHERE uri LIKE \\u0027youtube:\\/\\/v\\/$video_id_actual\\u0027\\u0022)-\\u003EfetchField();\\r\\n\\t\\t\\tif(empty($result)){\\r\\n\\t\\t\\t\\t$content = file_get_contents(\\u0022http:\\/\\/youtube.com\\/get_video_info?video_id=\\u0022.$video_id_actual);\\t\\/\\/To get the Title of the videos\\r\\n\\t\\t\\t\\tparse_str($content,$ytarr);\\r\\n\\t\\t\\t\\t$htagtitle=explode(\\u0022#\\u0022,$ytarr[\\u0027title\\u0027]);\\r\\n\\t\\t\\t\\t$event_hash_tag=$htagtitle[1];\\r\\n\\t\\t\\t\\t$sql_event = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$event_hash_tag\\u0027\\u0022;\\r\\n\\t\\t\\t\\t$result_event = db_query($sql_event)-\\u003EfetchField();\\r\\n\\t\\t\\t\\tif(empty($result_event)){\\r\\n\\t\\t\\t\\t\\t$gnid=3107;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027video\\u0027;\\r\\n\\t\\t\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($video_id_actual,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t\\t\\t$video_path = \\u0027http:\\/\\/www.youtube.com\\/watch?v=\\u0027.$video_id_actual;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $htagtitle[0];\\r\\n\\t\\t\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_youtube\\u0027, \\u0027includes\\/MediaInternetYouTubeHandler.inc\\u0027);\\r\\n\\t\\t\\t\\t\\t$obj = new MediaInternetYouTubeHandler($video_path);\\r\\n\\t\\t\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\t\\r\\n\\t\\t\\t\\t\\tglobal $language ;\\r\\n                     $lang_name = $language-\\u003Elanguage ;\\r\\n                    $node-\\u003Elanguage = $lang_name;\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\t\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t$params[\\u0027type\\u0027] = \\u0027Video\\u0027;\\r\\n\\t\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse{\\r\\n\\t\\t\\t\\t\\t$gnid=$result_event;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027video\\u0027;\\r\\n\\t\\t\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($video_id_actual,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t\\t\\t$video_path = \\u0027http:\\/\\/www.youtube.com\\/watch?v=\\u0027.$video_id_actual;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $htagtitle[0];\\r\\n\\t\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_youtube\\u0027, \\u0027includes\\/MediaInternetYouTubeHandler.inc\\u0027);\\r\\n\\t\\t\\t\\t\\t$obj = new MediaInternetYouTubeHandler($video_path);\\r\\n\\t\\t\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\t\\t\\t\\t\\t global $language ;\\r\\n                     $lang_name = $language-\\u003Elanguage ;\\r\\n                     $node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\t\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\t\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t$params[\\u0027type\\u0027] = \\u0027Video\\u0027;\\r\\n\\t\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\t\\r\\n\\t\\t\\telse{\\r\\n\\t\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027nothing\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t\\t}\\r\\n\\t}\\t\\t\\r\\n}\\r\\nelse{\\r\\n    $mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n    $params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n    $params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n    drupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(),$params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\/* Will delete the node which doesn\\u0027t satisfy subject format\\r\\n\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t$extracted_tag = $hash_tag[1];\\r\\n\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\r\\n\\tif(empty($result)){\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t}\\r\\n\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t*\\/\\r\\n\\tnode_delete($node-\\u003Enid);\\r\\n}\\r\\nfunction _get_users_in_group($gid) {\\r\\n  $query = db_select(\\u0027users\\u0027, \\u0027u\\u0027); \\r\\n  $query\\r\\n    -\\u003Econdition(\\u0027u.uid\\u0027, 0, \\u0027\\u003C\\u003E\\u0027)\\r\\n    -\\u003Econdition(\\u0027u.status\\u0027, 1, \\u0027=\\u0027)\\r\\n    -\\u003Efields(\\u0027u\\u0027, array(\\u0027uid\\u0027, \\u0027mail\\u0027))\\r\\n    -\\u003Ejoin(\\u0027og_membership\\u0027, \\u0027ogm\\u0027, \\u0022ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = \\u0027user\\u0027\\u0022, array(\\u0027:gid\\u0027 =\\u003E $gid));\\r\\n  return $query-\\u003Eexecute();\\r\\n}" } },
        { "node_unpublish" : { "node" : [ "node" ] } }
      ]
    }
  }');
  $items['rules_email_import_using_feeds_cloned_'] = entity_import('rules_config', '{ "rules_email_import_using_feeds_cloned_" : {
      "LABEL" : "Emails alerts for Event members\\/followers (content not imported from emails)",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules", "og", "php", "rules_i18n" ],
      "ON" : [ "node_insert" ],
      "IF" : [
        { "node_is_of_type" : { "node" : [ "node" ], "type" : { "value" : { "card" : "card" } } } },
        { "data_is_empty" : { "data" : [ "node:field-email-subject" ] } },
        { "data_is_empty" : { "data" : [ "node:field-email-body" ] } },
        { "og_entity_is_group_content" : { "entity" : [ "node" ] } }
      ],
      "DO" : [
        { "og_get_members" : {
            "USING" : { "group_content" : [ "node" ] },
            "PROVIDE" : { "group_members" : { "group_members" : "List of group members" } }
          }
        },
        { "mail" : {
            "to" : "\\u003C?php\\r\\nforeach($group_members  as $key){\\r\\necho ($key-\\u003Email.\\u0027,\\u0027);\\r\\n}\\r\\n?\\u003E",
            "subject" : "A new [node:field-card-type] card has been added to [node:og-group-ref]",
            "message" : "[node:field-card-type] card [node:field-card-headline] has been added to [node:og-group-ref], a Relay event you are following. To view this update go to: \\r\\n\\u003C?php\\r\\nglobal $base_url;\\r\\n$event_id = \\u0027node\\/\\u0027.$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n$alias = drupal_get_path_alias($event_id);\\r\\n$path = $base_url.\\u0027\\/\\u0027.$alias;\\r\\necho \\u0022\\u003Ca href=\\u0027$path\\u0027\\u003E$alias\\u003C\\/a\\u003E\\u0022;\\r\\n?\\u003E",
            "language" : [ "" ]
          }
        }
      ]
    }
  }');
  $items['rules_email_import_using_feeds_for_roles_except_reporter'] = entity_import('rules_config', '{ "rules_email_import_using_feeds_for_roles_except_reporter" : {
      "LABEL" : "Email Import using feeds for roles except reporter",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules", "php" ],
      "ON" : [ "node_insert" ],
      "IF" : [
        { "node_is_of_type" : { "node" : [ "node" ], "type" : { "value" : { "card" : "card" } } } },
        { "NOT data_is_empty" : { "data" : [ "node:field-email-subject" ] } },
        { "NOT data_is_empty" : { "data" : [ "node:field-email-body" ] } },
        { "NOT php_eval" : { "code" : "$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\nif(!empty($result_sender_user )){\\r\\n\\t$sender=user_load($result_sender_user);\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\tif((in_array(\\u0027Reporter\\u0027,$sender-\\u003Eroles)) \\u0026\\u0026 (count(array_intersect($existing_roles , $sender-\\u003Eroles)) == 1)){\\r\\n\\t\\treturn TRUE;\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\treturn FALSE;\\r\\n\\t}\\r\\n}\\r\\nelse{\\r\\n\\treturn TRUE;\\r\\n}" } }
      ],
      "DO" : [
        { "php_eval" : { "code" : "$youtube_body=strip_tags($node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n$youtube_body_string = trim(preg_replace(\\u0027\\/\\\\s+\\/\\u0027, \\u0027 \\u0027,$youtube_body));\\r\\n$pos=strpos($youtube_body_string,\\u0027Confirmation of Mobile Video Upload\\u0027);\\r\\nif(preg_match(\\u0022\\/Editor\\/i\\u0022, $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027])){\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Editor\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($result_sender_user,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027user is there\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t    $sender=user_load($result_sender_user);\\r\\n\\t\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\nwatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027user with role is there\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\t    \\r\\n\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027producermessage\\u0027;\\r\\n\\t\\t$node-\\u003Efield_card_editors_name[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_name[\\u0027und\\u0027][0][\\u0027value\\u0027];\\t\\r\\n\\t\\r\\n\\t\\t\\/\\/$node-\\u003Efield_editor_s_subject[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t$body_text = strip_tags($node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n\\t\\tif(strlen($body_text) \\u003C= \\u00272\\u0027){\\r\\n                   $mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n                    watchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($mail_to).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n               \\r\\n\\t\\t\\r\\n\\r\\n\\t\\t    $params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t    $params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n\\t\\t     drupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t}\\r\\n\\t\\t$profile = profile2_load_by_user($result_sender_user , \\u0027public_profile\\u0027);\\r\\n\\t\\t$display_mail = $profile-\\u003Efield_public_email[\\u0027und\\u0027][\\u00270\\u0027][\\u0027email\\u0027];\\r\\n\\t\\tif(empty($display_mail)){\\r\\n\\t\\t     $node-\\u003Efield_editor_s_email_address[\\u0027und\\u0027][0][\\u0027email\\u0027]=$node-\\u003Efield_email_from[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t   $node-\\u003Efield_editor_s_email_address[\\u0027und\\u0027][0][\\u0027email\\u0027] = $display_mail;\\r\\n\\t\\t}\\r\\n\\t\\t$node-\\u003Ebody[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t$node-\\u003Ebody[\\u0027und\\u0027][0][\\u0027format\\u0027]= \\u0022full_html\\u0022;\\r\\n\\t\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t\\t$extracted_tag = $hash_tag[1];\\r\\n\\t\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\t\\tif(empty($result)){\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t\\t}\\r\\n\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\t\\tglobal $language ;\\r\\n\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t$params[\\u0027type\\u0027] = \\u0027Editor Message\\u0027;\\r\\n\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t}\\r\\n\\t\\t\\/\\/Sending of mail ends here\\r\\n\\t    }\\r\\n\\t    else{\\r\\n\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027user has no role\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\t  \\r\\n\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t    }\\r\\n\\t}\\t\\r\\n}\\r\\nelseif(preg_match(\\u0022\\/Article\\/i\\u0022, $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027])){\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t$sender=user_load($result_sender_user);\\r\\n\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Article\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027article\\u0027;\\r\\n\\t\\/\\/$node-\\u003Efield_author[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_name[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$node-\\u003Efield_editor_s_email_address[\\u0027und\\u0027][0][\\u0027email\\u0027]=$node-\\u003Efield_email_from[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$node-\\u003Efield_article_subject[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\/\\/$val=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t$val=check_markup($node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027], \\u0027full_html\\u0027, \\u0027\\u0027, FALSE);\\r\\n\\t$stripped_body=strip_tags($val,\\u0027\\u003Cbr\\u003E\\u0027);\\r\\n\\t$nl_body=nl2br($stripped_body);\\r\\n\\t$expl_body = explode(\\u0022\\u003Cbr \\/\\u003E\\u0022, $nl_body);\\r\\n\\t$all_lines=array_filter($expl_body, create_function(\\u0027$a\\u0027,\\u0027return preg_match(\\u0022#\\\\S#\\u0022, $a);\\u0027));\\r\\n\\t$all_lines = array_values($all_lines);\\r\\n\\t\\/\\/watchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($all_lines,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\tforeach($all_lines as $key =\\u003E $line)\\r\\n\\t{\\r\\n\\t\\tif($key == 0){\\r\\n\\t\\t\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $line;\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif($key == 1){\\r\\n\\r\\n\\t\\t\\t$node-\\u003Efield_author[\\u0027und\\u0027][0][\\u0027value\\u0027] = $line;\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\t\\tif($key == 2){\\r\\n\\t\\t\\t$node-\\u003Efield_read_more_link[\\u0027und\\u0027][0][\\u0027url\\u0027] = $line;\\r\\n\\t\\t\\tcontinue;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t$node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027value\\u0027] = $node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027value\\u0027].\\u0022 \\u0022.$line;\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\tif($key \\u003C= 4){\\r\\n\\t\\t$mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t$params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t}\\r\\n\\t$node-\\u003Efield_card_article_introduction[\\u0027und\\u0027][0][\\u0027format\\u0027] = \\u0022full_html\\u0022;\\r\\n\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t$extracted_tag = $hash_tag[1];\\r\\n\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\tif(empty($result)){\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t}\\r\\n\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\t global $language ;\\r\\n\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t$params[\\u0027type\\u0027] = \\u0027Article\\u0027;\\r\\n\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\tforeach ($group_members AS $member){\\r\\n\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t}\\r\\n\\telse{\\r\\n\\tnode_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n}\\r\\n}\\r\\nelseif(preg_match(\\u0022\\/tweet\\/i\\u0022, $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027])){\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$sender=user_load($result_sender_user);\\r\\n\\t\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\n\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Tweet\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027ftweet\\u0027;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Efield_featured_tweet_subject[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t\\t$body_text = strip_tags($node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n\\t\\t\\tif(strlen($body_text) \\u003C= \\u00272\\u0027){\\r\\n\\t\\t\\t\\t$mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t\\t$params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$node-\\u003Efield_card_featured_tweet[\\u0027und\\u0027][0][\\u0027value\\u0027]=$node-\\u003Efield_email_body[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t\\t$node-\\u003Efield_card_featured_tweet[\\u0027und\\u0027][0][\\u0027format\\u0027] = \\u0022full_html\\u0022;\\r\\n\\t\\t\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t\\t\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t\\t\\t$extracted_tag = $hash_tag[1];\\r\\n\\t\\t\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t\\t\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\r\\n\\t\\t\\tif(empty($result)){\\r\\n\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse{\\r\\n\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t$node-\\u003Estatus = \\u00270\\u0027;\\r\\n\\t\\t\\t\\/\\/node_save($node);\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\t\\t\\tglobal $language ;\\r\\n            $lang_name = $language-\\u003Elanguage ;\\r\\n            $node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t$params[\\u0027type\\u0027] = \\u0027Featured Tweet\\u0027;\\r\\n\\t\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\nelseif($pos != false){\\r\\n\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027Youtube\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t$sender_mail = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n\\t$sql_sender_user = \\u0022SELECT `uid` FROM `users` WHERE `mail` LIKE \\u0027$sender_mail\\u0027\\u0022;\\r\\n\\t$existing_roles = array(\\u0027Administrator\\u0027,\\u0027Editor\\u0027,\\u0027Managing Reporter\\u0027,\\u0027Reporter\\u0027);\\r\\n\\t$result_sender_user = db_query($sql_sender_user)-\\u003EfetchField();\\r\\n\\tif(empty($result_sender_user )){\\r\\n\\t    node_delete($node-\\u003Enid);\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$sender=user_load($result_sender_user);\\r\\n\\t\\tif(count(array_intersect($existing_roles , $sender-\\u003Eroles)) \\u003E 0){\\r\\n\\t\\t\\t$video_id_text=explode(\\u0027http:\\/\\/www.youtube.com\\/watch?v=\\u0027,$node-\\u003Efield_email_body[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027]);\\r\\n\\t\\t\\t$video_id=explode(\\u0027\\u0022\\u0027,$video_id_text[\\u00271\\u0027]);\\r\\n\\t\\t\\t$video_id_actual = $video_id[\\u00270\\u0027];\\r\\n\\t\\t\\t$result = db_query(\\u0022SELECT fid FROM file_managed WHERE uri LIKE \\u0027youtube:\\/\\/v\\/$video_id_actual\\u0027\\u0022)-\\u003EfetchField();\\r\\n\\t\\t\\tif(empty($result)){\\r\\n\\t\\t\\t\\t$content = file_get_contents(\\u0022http:\\/\\/youtube.com\\/get_video_info?video_id=\\u0022.$video_id_actual);\\t\\/\\/To get the Title of the videos\\r\\n\\t\\t\\t\\tparse_str($content,$ytarr);\\r\\n\\t\\t\\t\\t$htagtitle=explode(\\u0022#\\u0022,$ytarr[\\u0027title\\u0027]);\\r\\n\\t\\t\\t\\t$event_hash_tag=$htagtitle[1];\\r\\n\\t\\t\\t\\t$sql_event = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$event_hash_tag\\u0027\\u0022;\\r\\n\\t\\t\\t\\t$result_event = db_query($sql_event)-\\u003EfetchField();\\r\\n\\t\\t\\t\\tif(empty($result_event)){\\r\\n\\t\\t\\t\\t\\t$gnid=3107;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027video\\u0027;\\r\\n\\t\\t\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($video_id_actual,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t\\t\\t$video_path = \\u0027http:\\/\\/www.youtube.com\\/watch?v=\\u0027.$video_id_actual;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $htagtitle[0];\\r\\n\\t\\t\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_youtube\\u0027, \\u0027includes\\/MediaInternetYouTubeHandler.inc\\u0027);\\r\\n\\t\\t\\t\\t\\t$obj = new MediaInternetYouTubeHandler($video_path);\\r\\n\\t\\t\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\t\\r\\n\\t\\t\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t    field_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\t\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t$params[\\u0027type\\u0027] = \\u0027Video\\u0027;\\r\\n\\t\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\telse{\\r\\n\\t\\t\\t\\t\\t$gnid=$result_event;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027]=\\u0027video\\u0027;\\r\\n\\t\\t\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r($video_id_actual,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t\\t\\t$video_path = \\u0027http:\\/\\/www.youtube.com\\/watch?v=\\u0027.$video_id_actual;\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $htagtitle[0];\\r\\n\\t\\t\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_youtube\\u0027, \\u0027includes\\/MediaInternetYouTubeHandler.inc\\u0027);\\r\\n\\t\\t\\t\\t\\t$obj = new MediaInternetYouTubeHandler($video_path);\\r\\n\\t\\t\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027en\\u0027;\\r\\n\\t\\t\\t\\t\\tglobal $language ;\\r\\n                   $lang_name = $language-\\u003Elanguage ;\\r\\n                    $node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\t\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t\\t\\t\\t\\t\\/\\/sending of mail to all the group members on successful creation of a card\\r\\n\\t\\t\\t$group_id = $node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027];\\r\\n\\t\\t\\t$group_members = _get_users_in_group($group_id); \\r\\n\\t\\t\\t$params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n\\t\\t\\t$params[\\u0027type\\u0027] = \\u0027Video\\u0027;\\r\\n\\t\\t\\t$params[\\u0027event_id\\u0027] = $group_id;\\r\\n\\t\\t\\tforeach ($group_members AS $member){\\r\\n\\t\\t\\t\\tdrupal_mail(\\u0027custom_module\\u0027, \\u0027members\\u0027, $member-\\u003Email , language_default(), $params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\t\\t}\\r\\n\\t\\/\\/Sending of mail ends here\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\t\\r\\n\\t\\t\\telse{\\r\\n\\t\\t\\t\\twatchdog(\\u0022debug\\u0022,\\u0022\\u003Cpre\\u003E\\u0022.print_r(\\u0027nothing\\u0027,TRUE).\\u0022\\u003C\\/pre\\u003E\\u0022);\\r\\n\\t\\t\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\t\\tnode_delete($node-\\u003Enid);\\r\\n\\t\\t}\\r\\n\\t}\\t\\t\\r\\n}\\r\\nelse{\\r\\n    $mail_to = $node-\\u003Efield_email_from[\\u0027und\\u0027][\\u00270\\u0027][\\u0027value\\u0027];\\r\\n    $params[\\u0027from\\u0027] = variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027));\\r\\n    $params[\\u0027created_node\\u0027] = $node-\\u003Evid;\\r\\n    drupal_mail(\\u0027custom_module\\u0027, \\u0027article\\u0027, $mail_to , language_default(),$params, variable_get(\\u0027site_mail\\u0027, ini_get(\\u0027sendmail_from\\u0027)));\\r\\n\\t\\/* Will delete the node which doesn\\u0027t satisfy subject format\\r\\n\\t$subject = $node-\\u003Efield_email_subject[\\u0027und\\u0027][0][\\u0027value\\u0027];\\r\\n\\t$hash_tag = explode(\\u0027#\\u0027, $subject);\\r\\n\\t$extracted_tag = $hash_tag[1];\\r\\n\\t$sql = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$extracted_tag\\u0027\\u0022;\\r\\n\\t$result = db_query($sql)-\\u003EfetchField();\\r\\n\\r\\n\\tif(empty($result)){\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027] = \\u00273107\\u0027;\\r\\n\\t}\\r\\n\\telse{\\r\\n\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][\\u00270\\u0027][\\u0027target_id\\u0027]= $result;\\r\\n\\t}\\r\\n\\tfield_attach_update(\\u0027node\\u0027, $node);\\r\\n\\t*\\/\\r\\n\\tnode_delete($node-\\u003Enid);\\r\\n}\\r\\nfunction _get_users_in_group($gid) {\\r\\n  $query = db_select(\\u0027users\\u0027, \\u0027u\\u0027); \\r\\n  $query\\r\\n    -\\u003Econdition(\\u0027u.uid\\u0027, 0, \\u0027\\u003C\\u003E\\u0027)\\r\\n    -\\u003Econdition(\\u0027u.status\\u0027, 1, \\u0027=\\u0027)\\r\\n    -\\u003Efields(\\u0027u\\u0027, array(\\u0027uid\\u0027, \\u0027mail\\u0027))\\r\\n    -\\u003Ejoin(\\u0027og_membership\\u0027, \\u0027ogm\\u0027, \\u0022ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = \\u0027user\\u0027\\u0022, array(\\u0027:gid\\u0027 =\\u003E $gid));\\r\\n  return $query-\\u003Eexecute();\\r\\n}" } },
        { "node_publish" : { "node" : [ "node" ] } }
      ]
    }
  }');
  $items['rules_flickr_generate_on_cron_run'] = entity_import('rules_config', '{ "rules_flickr_generate_on_cron_run" : {
      "LABEL" : "Flickr photo card on cron run",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "php", "rules" ],
      "ON" : [ "cron" ],
      "DO" : [
        { "php_eval" : { "code" : "$uname=\\u0022117426982@N02\\u0022; \\/\\/username for flickr account. Change when creating a new Relay instance.\\r\\n$apikey=\\u0022ae0b43f589b19375702aa4c16f5a8fd1\\u0022;\\t\\/\\/api key for flickr account. Change when creating a new Relay instance.\\r\\n\\r\\nclass flickr {\\r\\n \\r\\n    function flickr($username,$api_key) {\\r\\n        $this-\\u003Eusername = $username;\\r\\n        $this-\\u003Eapi_key  = $api_key;\\r\\n        $this-\\u003Euser_id  = \\u0027\\u0027;\\r\\n        $this-\\u003Eresponse = array();\\r\\n        $this-\\u003Etimeout  = 30;\\r\\n    }\\r\\n \\r\\n    function getUserId() {\\r\\n        $url = \\u0027http:\\/\\/api.flickr.com\\/services\\/rest\\/?api_key=\\u0027 . urlencode($this-\\u003Eapi_key) . \\u0027\\u0026method=flickr.urls.lookupUser\\u0026url=http:\\/\\/www.flickr.com\\/photos\\/\\u0027 . urlencode($this-\\u003Eusername) . \\u0027\\/\\u0027;\\r\\n        $return = $this-\\u003Efetch($url);\\r\\n        \\r\\n        return $return-\\u003Euser-\\u003Eattributes()-\\u003Eid;\\r\\n    }\\r\\n \\r\\n    function getImages($count) {\\r\\n        $url = \\u0027http:\\/\\/api.flickr.com\\/services\\/rest\\/?api_key=\\u0027 . urlencode($this-\\u003Eapi_key) . \\u0027\\u0026method=flickr.photos.search\\u0026user_id=\\u0027 . $this-\\u003EgetUserId() . \\u0027\\u0026per_page=\\u0027 . urlencode($count);\\r\\n  \\r\\n        return $this-\\u003Efetch($url);\\r\\n    }\\r\\n \\r\\n    function fetch($url,$post = false) {\\r\\n        $ch = curl_init($url);\\r\\n        curl_setopt($ch, CURLOPT_NOBODY, 0);\\r\\n        curl_setopt($ch, CURLOPT_HEADER, 0);\\r\\n        curl_setopt($ch, CURLOPT_USERAGENT, \\u0027Flickr\\u0027);\\r\\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\\r\\n        curl_setopt($ch, CURLOPT_TIMEOUT, $this-\\u003Etimeout);\\r\\n        $output = curl_exec($ch);\\r\\n        $this-\\u003Eresponse = curl_getinfo($ch);\\r\\n        curl_close($ch);\\r\\n        if((int)$this-\\u003Eresponse[\\u0027http_code\\u0027] == 200) {\\r\\n            return new SimpleXMLElement($output);\\r\\n        }\\r\\n        else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n \\r\\n}\\r\\n\\r\\n\\r\\n$flickr = new flickr($uname,$apikey);\\t\\/\\/Creating object of the class\\r\\n$images = $flickr-\\u003EgetImages(30);\\t\\/\\/Specify number of photos to fetch \\r\\nforeach($images-\\u003Ephotos-\\u003Ephoto as $photo) {\\t\\/\\/If images are present. fetch the image links.\\r\\n\\t\\/\\/Flickr Image details\\r\\n\\t$farm = $photo-\\u003Eattributes()-\\u003Efarm;\\r\\n\\t$server = $photo-\\u003Eattributes()-\\u003Eserver;\\r\\n\\t$id = $photo-\\u003Eattributes()-\\u003Eid;\\r\\n\\t$secret = $photo-\\u003Eattributes()-\\u003Esecret;\\r\\n\\t$title = $photo-\\u003Eattributes()-\\u003Etitle;\\r\\n\\t\\r\\n\\t\\/\\/Variable which stores the image link\\r\\n\\t$imageurl=\\u0022http:\\/\\/farm\\u0022.\\u0022$farm\\u0022.\\u0022.static.flickr.com\\/\\u0022.\\u0022$server\\u0022.\\u0022\\/\\u0022.\\u0022$id\\u0022.\\u0022_\\u0022.\\u0022$secret\\u0022.\\u0022_c.jpg\\u0022;\\r\\n\\t\\t\\r\\n\\t$image_id = \\u0022$id\\u0022.\\u0022_\\u0022.\\u0022$secret\\u0022.\\u0022_c.jpg\\u0022;\\t\\/\\/Used to check whether images are already present using Image ID\\r\\n\\t$itags = explode(\\u0022#\\u0022,$title);\\t\\/\\/Get tag from the video title using explode.\\r\\n\\r\\n\\t$result = db_query(\\u0022SELECT fid FROM file_managed WHERE uri LIKE \\u0027public:\\/\\/$image_id\\u0027\\u0022)-\\u003EfetchField();\\r\\n\\r\\n\\tif(empty($result)){\\r\\n\\t\\t$event_hash_tag=$itags[1];\\r\\n\\t\\t$sql_event = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$event_hash_tag\\u0027\\u0022;\\r\\n\\t\\t$result_event = db_query($sql_event)-\\u003EfetchField();\\t\\r\\n\\t\\tif(empty($result_event)){\\r\\n\\t\\t\\t$gnid=3107;\\r\\n\\t\\t\\t$node = new StdClass();\\r\\n\\t\\t\\t$node-\\u003Etype = \\u0027card\\u0027;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = LANGUAGE_NONE;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t$node-\\u003Euid = 1;\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027] = \\u0027image\\u0027;\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $itags[0];\\r\\n\\t\\t\\t$image_path = $imageurl;\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\t$image = file_get_contents($image_path); \\/\\/ string\\r\\n\\t\\t\\t$file = file_save_data($image,\\u0027public:\\/\\/\\u0027.$image_id);\\r\\n\\t\\t\\t$node-\\u003Efield_card_upload_image[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\tnode_save($node);  \\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\t$gnid=$result_event;\\r\\n\\t\\t\\t$node = new StdClass();\\r\\n\\t\\t\\t$node-\\u003Etype = \\u0027card\\u0027;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = LANGUAGE_NONE;\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t$node-\\u003Euid = 1;\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027] = \\u0027image\\u0027;\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $itags[0];\\r\\n\\t\\t\\t$image_path = $imageurl;\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\t$image = file_get_contents($image_path); \\/\\/ string\\r\\n\\t\\t\\t$file = file_save_data($image,\\u0027public:\\/\\/\\u0027.$image_id);\\r\\n\\t\\t\\t$node-\\u003Efield_card_upload_image[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\tnode_save($node);  \\r\\n\\t\\t}\\r\\n\\t}else{}\\r\\n}" } }
      ]
    }
  }');
  $items['rules_get_alerts_after_login'] = entity_import('rules_config', '{ "rules_get_alerts_after_login" : {
      "LABEL" : "Get alerts after login",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "php", "rules" ],
      "ON" : [ "user_login" ],
      "DO" : [
        { "php_eval" : { "code" : "if(is_numeric(arg(1))){\\r\\n\\t$gid = arg(1);\\r\\n\\t$event_node=node_load($gid);\\r\\n\\tif($event_node-\\u003Etype == \\u0027event\\u0027){\\r\\n\\t\\tif (og_is_member(\\u0027node\\u0027, $gid, \\u0027user\\u0027)) {\\r\\n\\t\\t\\tdsm(\\u0027You are already following this event\\u0027);\\r\\n\\t\\t}\\r\\n\\t\\telse{\\t\\/\\/dsm(\\u0027not a member\\u0027);\\r\\n\\t\\t\\r\\n\\t\\t\\tglobal $user;               \\r\\n\\t\\t\\t$account = user_load($user-\\u003Euid);\\r\\n\\t\\t\\tog_group(\\u0027node\\u0027, $gid, array(\\r\\n\\t\\t\\t\\t\\u0022entity type\\u0022       =\\u003E \\u0022user\\u0022,\\r\\n\\t\\t\\t\\t\\u0022entity\\u0022        =\\u003E $account,\\r\\n\\t\\t\\t\\t\\u0022membership type\\u0022   =\\u003E OG_MEMBERSHIP_TYPE_DEFAULT,\\r\\n\\t\\t\\t));\\r\\n\\t\\t\\tog_role_grant(\\u0027node\\u0027, $gid, $account-\\u003Euid, 2);\\t\\t\\t\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\\r\\n}" } }
      ]
    }
  }');
  $items['rules_giving_reporter_role_as_og_reporter_role'] = entity_import('rules_config', '{ "rules_giving_reporter_role_as_og_reporter_role" : {
      "LABEL" : "Giving Reporter role as OG reporter role",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules", "profile2" ],
      "ON" : [ "profile2_insert", "profile2_update" ],
      "IF" : [
        { "user_has_role" : { "account" : [ "profile2:user" ], "roles" : { "value" : { "5" : "5" } } } }
      ],
      "DO" : []
    }
  }');
  $items['rules_receive_email_alerts_for_admin_and_editor_on_event_creatio'] = entity_import('rules_config', '{ "rules_receive_email_alerts_for_admin_and_editor_on_event_creatio" : {
      "LABEL" : "Receive email alerts for admin and editor on event creation.",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules" ],
      "ON" : [ "node_insert" ],
      "IF" : [
        { "node_is_of_type" : { "node" : [ "node" ], "type" : { "value" : { "event" : "event" } } } }
      ],
      "DO" : [
        { "mail_to_users_of_role" : {
            "roles" : { "value" : { "4" : "4", "3" : "3" } },
            "subject" : "[node:title] event created",
            "message" : "A new [node:content-type] has been created in [site:name]. You can view it at \\r\\n\\u003Ca href=\\u0022[node:url]\\u0022\\u003E[node:title]\\u003C\\/a\\u003E",
            "from" : "noreply@bbg.gov"
          }
        }
      ]
    }
  }');
  $items['rules_reload_page_after_login'] = entity_import('rules_config', '{ "rules_reload_page_after_login" : {
      "LABEL" : "reload page after login",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules" ],
      "ON" : [ "user_login" ],
      "DO" : [ { "redirect" : { "url" : "[site:current-page]" } } ]
    }
  }');
  $items['rules_update_card_title_if_headline_does_not_exist_1'] = entity_import('rules_config', '{ "rules_update_card_title_if_headline_does_not_exist_1" : {
      "LABEL" : "Update card title if headline does not exist",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules" ],
      "ON" : [ "node_insert" ],
      "IF" : [
        { "node_is_of_type" : { "node" : [ "node" ], "type" : { "value" : { "card" : "card" } } } },
        { "data_is_empty" : { "data" : [ "node:field-card-headline" ] } }
      ],
      "DO" : [
        { "data_set" : { "data" : [ "node:title" ], "value" : "[node:field-card-type]" } }
      ]
    }
  }');
  $items['rules_update_card_title_if_headline_exists'] = entity_import('rules_config', '{ "rules_update_card_title_if_headline_exists" : {
      "LABEL" : "Update card title if headline exists",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "rules" ],
      "ON" : [ "node_insert" ],
      "IF" : [
        { "node_is_of_type" : { "node" : [ "node" ], "type" : { "value" : { "card" : "card" } } } },
        { "NOT data_is_empty" : { "data" : [ "node:field-card-headline" ] } }
      ],
      "DO" : [
        { "data_set" : { "data" : [ "node:title" ], "value" : "[node:field-card-headline]" } }
      ]
    }
  }');
  $items['rules_vimeo_card_creation_on_cron_run'] = entity_import('rules_config', '{ "rules_vimeo_card_creation_on_cron_run" : {
      "LABEL" : "Vimeo video card on cron run",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "php", "rules" ],
      "ON" : [ "cron" ],
      "DO" : [
        { "php_eval" : { "code" : "define(\\u0022CONSTANT\\u0022, \\u0022637117\\u0022); \\/\\/Vimeo account id. Change when creating a new Relay instance.\\r\\n\\r\\n$vimeo_channel_name = CONSTANT;\\t\\t\\/\\/Vimeo channel name\\r\\n$count=0;\\r\\n$no_of_video=0;\\r\\n$api_endpoint = \\u0027http:\\/\\/vimeo.com\\/api\\/v2\\/channel\\/\\u0027 . $vimeo_channel_name;\\r\\n\\r\\n\\/\\/ Curl helper function\\r\\nfunction curl_get($url) {\\r\\n\\t$curl = curl_init($url);\\r\\n\\tcurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\\r\\n\\tcurl_setopt($curl, CURLOPT_TIMEOUT, 30);\\r\\n\\tcurl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);\\r\\n\\t$return = curl_exec($curl);\\r\\n\\tcurl_close($curl);\\r\\n\\treturn $return;\\r\\n}\\r\\n\\r\\n\\/\\/ Load the video from API\\r\\n$videos = simplexml_load_string(curl_get($api_endpoint . \\u0027\\/videos.xml\\u0027));\\r\\n\\r\\n\\/\\/dsm($eventtags);\\r\\nforeach ($videos-\\u003Evideo as $video){\\r\\n\\t$gnid= NULL;\\r\\n\\t$videourl= $video-\\u003Eurl;\\r\\n\\t$vid=explode(\\u0022com\\/\\u0022,$videourl);\\r\\n\\t$videotitle= $video-\\u003Etitle;\\r\\n\\t$vtags = explode(\\u0022#\\u0022,$videotitle);\\t\\/\\/Get tag from the video title using explode.\\r\\n\\t$videotags= $video-\\u003Etags;\\r\\n\\t\\/\\/$size=sizeof($existing_urls);\\r\\n\\t\\/\\/URL Check\\r\\n\\r\\n\\t\\/\\/check for unique url\\r\\n\\t$video_id=$vid[1]; \\/\\/Get video URL id i.e., number after .com\\r\\n\\t\\/\\/$sql = \\u0022SELECT  `uid` FROM  `file_managed` WHERE  `uri` LIKE \\u0027vimeo:\\/\\/v\\/$video_id\\u0027\\u0022;\\r\\n\\t$result = db_query(\\u0022SELECT fid FROM file_managed WHERE uri LIKE \\u0027vimeo:\\/\\/v\\/$video_id\\u0027\\u0022)-\\u003EfetchField();\\r\\n\\r\\n\\tif(empty($result)){\\r\\n\\t\\t$event_hash_tag=$vtags[1];\\r\\n\\t\\t$sql_event = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$event_hash_tag\\u0027\\u0022;\\r\\n\\t\\t$result_event = db_query($sql_event)-\\u003EfetchField();\\r\\n\\r\\n\\t\\tif(empty($result_event)){\\r\\n\\t\\t\\techo \\u0022No matching event hash tag, content created:$vtags[1]\\u003Cbr\\u003E\\u0022;\\t\\r\\n\\t\\t\\t$gnid=3107;\\r\\n\\t\\t\\t$node = new StdClass();\\r\\n\\t\\t\\t$node-\\u003Etype = \\u0027card\\u0027;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t\\/\\/echo \\u0022$lang_name\\u0022;\\r\\n\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027ur\\u0027;\\r\\n\\t\\t\\r\\n\\t\\t\\t$node-\\u003Euid = 1;\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027] = \\u0027video\\u0027;\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $vtags[0];\\r\\n\\t\\t\\t$video_path = $videourl;\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_vimeo\\u0027, \\u0027includes\\/MediaInternetVimeoHandler.inc\\u0027);\\r\\n\\t\\t\\t$obj = new MediaInternetVimeoHandler($video_path);\\r\\n\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\tnode_save($node);\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\techo \\u0022Matching event is there content created:$vtags[1]\\u003Cbr\\u003E\\u0022;\\r\\n\\t\\t\\t$gnid=$result_event;\\r\\n\\t\\t\\t$node = new StdClass();\\r\\n\\t\\t\\t$node-\\u003Etype = \\u0027card\\u0027;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t\\/\\/echo \\u0022$lang_name\\u0022;\\r\\n\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = \\u0027ur\\u0027;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t$node-\\u003Euid = 1;\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027] = \\u0027video\\u0027;\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $vtags[0];\\r\\n\\t\\t\\t$video_path = $videourl;\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_vimeo\\u0027, \\u0027includes\\/MediaInternetVimeoHandler.inc\\u0027);\\r\\n\\t\\t\\t$obj = new MediaInternetVimeoHandler($video_path);\\r\\n\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\tnode_save($node);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\techo \\u0022Video present node not created:$vid\\u003Cbr\\u003E\\u0022;\\r\\n\\t}\\r\\n}\\r\\n" } }
      ]
    }
  }');
  $items['rules_youtube_video_card_on_cron_run'] = entity_import('rules_config', '{ "rules_youtube_video_card_on_cron_run" : {
      "LABEL" : "YouTube video card on cron run",
      "PLUGIN" : "reaction rule",
      "REQUIRES" : [ "php", "rules" ],
      "ON" : [ "cron" ],
      "DO" : [
        { "php_eval" : { "code" : "$username = \\u0022relayvoanews\\u0022; \\/\\/YouTube username. Change when creating a new Relay instance.\\r\\n\\r\\n$vid = NULL;\\t\\/\\/Variable to store Youtube Video ID\\r\\n$xml = simplexml_load_file(sprintf(\\u0027http:\\/\\/gdata.youtube.com\\/feeds\\/base\\/users\\/%s\\/uploads?alt=rss\\u0026v=2\\u0026orderby=published\\u0027, $username));\\r\\n\\r\\nfor( $i = 0 ; $i \\u003C 10; $i++) {\\t\\t\\/\\/Get the latest 10 URL\\u0027s\\r\\n\\t$url=$xml-\\u003Echannel-\\u003Eitem[$i]-\\u003Elink;\\r\\n\\t$newurl=explode(\\u0022\\u0026\\u0022,$url);\\t\\/\\/Explode URL\\u0027s $newurl[0] contains the URL we need\\r\\n\\r\\n\\tif ( ! empty($xml-\\u003Echannel-\\u003Eitem[$i]-\\u003Elink) ){\\r\\n\\t\\tparse_str(parse_url($xml-\\u003Echannel-\\u003Eitem[$i]-\\u003Elink, PHP_URL_QUERY), $url_query);\\t\\/\\/To get only the ID of the videos\\r\\n\\t\\tif ( ! empty($url_query[\\u0027v\\u0027]) ){\\r\\n\\t\\t\\t$vid = $url_query[\\u0027v\\u0027];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t$content = file_get_contents(\\u0022http:\\/\\/youtube.com\\/get_video_info?video_id=\\u0022.$vid);\\t\\/\\/To get the Title of the videos\\r\\n\\/\\/dsm($content);\\r\\n\\tparse_str($content,$ytarr);\\r\\n\\t$htagtitle=explode(\\u0022#\\u0022,$ytarr[\\u0027title\\u0027]);\\t\\/\\/Get the Event Hashtag in Video title\\r\\n      dsm($htagtitle); \\/\\/title of the video \\r\\n       \\r\\n\\t\\r\\n\\t$video_id = $vid;\\t\\/\\/Assign video url id to video_id\\r\\n       \\r\\n       \\r\\n\\t$result = db_query(\\u0022SELECT fid FROM file_managed WHERE uri LIKE \\u0027youtube:\\/\\/v\\/$video_id\\u0027 \\u0022)-\\u003EfetchField();\\r\\ndsm($result);\\r\\n\\tif(empty($result)){\\r\\n\\t\\tdsm(\\u0022It doesn\\u0027t exist\\u0022);\\r\\n\\t\\t$event_hash_tag=$htagtitle[1];\\r\\n\\t\\t$sql_event = \\u0022SELECT  `entity_id` FROM  `field_data_field_event_hashtag` WHERE  `field_event_hashtag_value` LIKE \\u0027$event_hash_tag\\u0027\\u0022;\\r\\n\\t\\t$result_event = db_query($sql_event)-\\u003EfetchField();\\r\\n\\t\\t\\r\\n\\t\\tif(empty($result_event)){\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t$gnid=3107;\\r\\n\\t\\t\\t$node = new StdClass();\\r\\n\\t\\t\\t$node-\\u003Etype = \\u0027card\\u0027;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = LANGUAGE_NONE;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t$node-\\u003Euid = 1;\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027] = \\u0027video\\u0027;\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $htagtitle[0];\\r\\n\\t\\t\\t$video_path = $newurl[0];\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_youtube\\u0027, \\u0027includes\\/MediaInternetYouTubeHandler.inc\\u0027);\\r\\n\\t\\t\\t$obj = new MediaInternetYouTubeHandler($video_path);\\r\\n\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\tnode_save($node);  \\r\\n\\t\\t\\t\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t$gnid=$result_event;\\r\\n\\t\\t\\t$node = new StdClass();\\r\\n\\t\\t\\t$node-\\u003Etype = \\u0027card\\u0027;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tglobal $language ;\\r\\n\\t\\t\\t$lang_name = $language-\\u003Elanguage ;\\r\\n\\t\\t\\t$node-\\u003Elanguage = $lang_name;\\r\\n\\t\\t\\t\\/\\/$node-\\u003Elanguage = LANGUAGE_NONE;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t$node-\\u003Euid = 1;\\r\\n\\t\\t\\t$node-\\u003Efield_card_type[\\u0027und\\u0027][0][\\u0027value\\u0027] = \\u0027video\\u0027;\\r\\n\\t\\t\\t$node-\\u003Efield_card_headline[\\u0027und\\u0027][0][\\u0027value\\u0027] = $htagtitle[0];\\r\\n\\t\\t\\t$video_path = $newurl[0];\\r\\n\\t\\t\\t$node-\\u003Eog_group_ref[\\u0027und\\u0027][0][\\u0027target_id\\u0027] = $gnid;\\r\\n\\t\\t\\tmodule_load_include(\\u0027inc\\u0027, \\u0027media_youtube\\u0027, \\u0027includes\\/MediaInternetYouTubeHandler.inc\\u0027);\\r\\n\\t\\t\\t$obj = new MediaInternetYouTubeHandler($video_path);\\r\\n\\t\\t\\t$file = $obj-\\u003EgetFileObject();\\r\\n\\t\\t\\t$file-\\u003Edisplay = 1;\\r\\n\\t\\t\\tfile_save($file);\\r\\n\\t\\t\\t$node-\\u003Efield_card_upload_video[\\u0027und\\u0027][0] = (array) $file;\\r\\n\\t\\t\\tnode_save($node);\\r\\n\\t\\t\\t\\r\\n\\t\\t}\\r\\n\\t} \\r\\n\\telse {\\r\\n\\t\\tdsm(\\u0022Video present node not created:$vid\\u003Cbr\\u003E\\u0022);\\r\\n\\t\\t\\r\\n\\t}\\r\\n}" } }
      ]
    }
  }');
  return $items;
}
