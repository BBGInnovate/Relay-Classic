<?php

function custom_module_menu() {
$items['custommodule/disqus/ajax'] = array(
    'title' => t('Test'),
    'type' => MENU_CALLBACK,
    'page callback' => 'custom_module_disqus_ajax',
    'access arguments' => array('access content'),
  );
$items['custommodule/alerts/ajax'] = array(
    'title' => t('Alers'),
    'type' => MENU_CALLBACK,
    'page callback' => 'custom_module_alerts_ajax',
    'access arguments' => array('access content'),
  );
  // Return the total count of cards for given event (group id)
  $items['event/%/count'] = array(
      'title' => t('Event Card Count'),
      'page callback' => 'custom_module_card_count',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

 return $items;
}
function custom_module_disqus_ajax($type = 'ajax') {
if ($type == 'ajax') {
 $domain = $_POST['domain'];
    $id = $_POST['id'];
     $title = $_POST['title'];
      $url = $_POST['url'];
$msg = "<div id='disqus_thread'></div>
<script type='text/javascript'>
 /* * * CONFIGURATION VARIABLES: THIS CODE IS ONLY AN EXAMPLE * * */
    var disqus_shortname = '$domain'; // Required - Replace example with your forum shortname
    var disqus_identifier = '$id';
    var disqus_title = '$title';
    var disqus_url = '$url';

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>";
        return drupal_json_output($msg);

  }
  else {
    $output = t("Error occured please try again or contact administrator");
    return $output;
  }
}
function custom_module_mail($key, &$message, $params) {
  switch($key) {
  case 'article':
  $node_id=$params['created_node'];
  $node=node_load($node_id);
  $langcode = $message['language']->language;
  $message['subject'] = 'Please resend your Beacon card request';
  $body_top = 'Hi, <br/>  the email you sent in to create a card on Beacon does not contain the information needed to create the type of card you intended to publish.<br/>'. 'The contents of your email was as follows:<br /><br /> Subject:'.$node->field_email_subject['und']['0']['value'].'<br/>Body:'.$node->field_email_body['und']['0']['value'].'<br />';
  $body_help = 'Please see below for the correct format for each type.<br />';
  $body_article = '<br/><b><u>Article</u></b><br/><b>Subject:</b> article #eventcontenttag<br/><b>Body:</b><br/>headline<br/>article author name<br/>read more url<br/>article intro text<br/>';
  $body_editor = '<br/><b><u>Editor Message</u></b><br/><b>Subject:</b>editor message #eventcontenttag<br/><b>Body:</b><br/>Editor Message text<br/>';
  $body_tweet = '<br/><b><u>Featured Tweet</u></b><br/><b>Subject:</b>tweet #eventcontenttag<br/><b>Body:</b><br/>tweet embed code<br/>';
  $message['body'][] =$body_top.$body_help.$body_article.$body_editor.$body_tweet;
  break;
  case 'members':
  $langcode = $message['language']->language;
  $card_type = $params['type'];
  $event_id = $params['event_id'];
  $event_node = node_load($event_id);
  $event_name = $event_node->title;
  $message['subject'] = 'A new '.$card_type.' card has been added to '.$event_name;
  //$node_id=$params['created_node'];
  //$node=node_load($node_id);
  //$langcode = $message['language']->language;
  //$message['body'][] =$body_top.$body_help.$body_article.$body_editor.$body_tweet;
  $body_membership = $card_type.' card has been added to '.$event_name.', a Relay event you are following. To view this update go to:';
 global $base_url;
 $event_url = 'node/'.$event_id;
$alias = drupal_get_path_alias($event_url);
$path = $base_url.'/'.$alias;
  $message['body'][] = $body_membership."<a href='$path'>$alias</a>";
  break;
case 'notice_housing_student':
  $node_email = node_load(94);
  $langcode = $message['language']->language;
  $message['subject'] = $node_email->title;
  $message['body'][] =$node_email->body['und'][0]['value'];
  $message['params']['attachments'][] = $attachment;
  break;
  }
}
function custom_module_alerts_ajax($type = 'ajax') {
	if ($type == 'ajax') {
		global $user;
               
		$account = user_load($user->uid);
                $event_id = $_POST['nid'];
		$node=node_load($event_id);
		og_group('node', $node->nid, array(
            "entity type"       => "user",
            "entity"        => $account,
            "membership type"   => OG_MEMBERSHIP_TYPE_DEFAULT,
        ));

		// Changes the users role in the group (1 = non-member, 2 = member, 3 = administrator member)
		og_role_grant('node', $node->nid, $account->uid, 3); 
		$msg = "You have successfully opted for getting the alerts";
		return drupal_json_output($msg);
	}
}

/**
* Output the number of cards for an group in JSON
*/
function custom_module_card_count($gid = 0) {
    drupal_add_http_header('Content-Type', 'application/javascript; utf-8');
    $output = array('count' => '0');
    if(is_numeric($gid)){
      //create the query
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'og_membership', '=')
        ->entityCondition('status', 1)
        ->propertyCondition('entity_type', 'node', '=')
        ->propertyCondition('field_name', 'og_group_ref', '=')
        ->propertyCondition('gid', $gid, '=')
        ->count();
        $output['count'] = $query->execute();
    }
    //output json result
    echo json_encode($output);
    exit(0);
}
